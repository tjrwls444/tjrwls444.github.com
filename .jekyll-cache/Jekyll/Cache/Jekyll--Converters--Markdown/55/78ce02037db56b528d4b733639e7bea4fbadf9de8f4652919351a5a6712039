I"a<p class="bold-text">1. Stack 이란</p>
<ul>
  <li>후입 선출 구조 LIFO</li>
  <li>위로 쌓아 간다.</li>
  <li>중간을 볼 수 없다. 위에서부터 찾아야 한다.</li>
</ul>
<pre>
Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();

push 1
1

push 2
2
1

push 3
3
2
1

pop() &gt;&gt; 위에 있는 것 제거 
2
1

peak() &gt;&gt; 맨 위에있는 것 출력 2
2
1

empty
size
</pre>

<p class="bold-text">2. Que란</p>
<ul>
  <li>선입 선출 FIFO</li>
  <li>아래로 쌓아간다.</li>
</ul>
<pre>
Queue&lt;Integar&gt; q = new LinkedList&lt;Integar&gt;();

add 1 
1

add 2
1
2

add 3
1
2
3

poll()
2
3

peak()
2
3

empty 
size

queue.add(queue.poll());
Que의 순회 
</pre>

<p class="bold-text">3. Deque란</p>
<ul>
  <li>양쪽 모두 입력과 출력이 가능</li>
</ul>
<pre>
 Deque&lt;Integar&gt; test = new ArrayDeque&lt;Integar&gt;();


addFirst 1 (맨 위에 넣기) &gt;&gt; O(1)
1

addLast 2 (맨 아래에에 넣기)&gt;&gt; O(1)
1
2

addFirst 3 &gt;&gt; O(1)
3
1
2

addLast 4
3
1
2
4

pop() &gt;&gt; 맨 위에 있는 것 제거 &gt;&gt; O(1)
1
2
4

removeLast() &gt;&gt; 맨 아래에있는 것 제거 &gt;&gt; O(1)
1
2

peek() &gt;&gt; 맨 위에 잇는것 출력 1 &gt;&gt; O(1)
1
2

peekLast() &gt;&gt; 맨 아래에 있는 것 출력 2 &gt;&gt; O(1)
1
2

empty - &gt; O(N)
size -&gt; O(n)

queue.add(queue.poll());
Que의 순회 
</pre>
:ET