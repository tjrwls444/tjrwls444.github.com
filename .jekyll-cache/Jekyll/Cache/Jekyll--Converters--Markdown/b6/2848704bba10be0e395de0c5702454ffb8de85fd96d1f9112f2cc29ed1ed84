I"^<h3 id="2-그래프의-탐색--깊이우선-탐색">2. 그래프의 탐색 : 깊이우선 탐색</h3>
<ul>
  <li>하나의 정점에서 시작해 끝까지 가본 후 돌아 올라온다</li>
  <li>어떻게 그래프 정접들을 탐색할 것인가에대한 알고리즘</li>
</ul>

<p class="bold-text"> i) 과정</p>
<ul>
  <li>root노드를 설정 후 방문 여부 확인 및 처음 방문이라면 출력한다.</li>
  <li>root노드와 인접한 노드들 for문 돌면서 위 로직 반복한다.</li>
</ul>

<p class="bold-text"> ii) 장점 </p>
<ul>
  <li>BFS보다 코드가 간단하다</li>
</ul>

<p class="bold-text"> iii) 단점 </p>
<ul>
  <li>느리다</li>
</ul>

<p class="bold-text"> vi) 시간복잡도</p>
<ul>
  <li>그래프 구현에 따라 다름 »  인접리스트 : O( N+E ), 인접 행렬 : O(N^2)</li>
</ul>
<pre>
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class GraphSearchDfsBfs {
    private ArrayList&lt;ArrayList&lt;int[]&gt;&gt; graph;
    private int size;
    
    // 정점의 개수
    public GraphSearchDfsBfs( int size) {
        this.graph = new ArrayList&lt;ArrayList&lt;int[]&gt;&gt;(); // 그래프 생성
        this.size  = size;
        // 각각의 정점들 초기화
        for(int i=0; i&lt;size+1; i++) {
            graph.add(new ArrayList&lt;int[]&gt;());
        }
    }
    
    // 단방향 노드로 세팅
    public void pushOnly( int start, int end ) {
        int weight = 0;
        int[] temp = { end, weight };
        graph.get(start).add(temp);
    }
    public void pushOnly( int start, int end, int weight ) {
        int[] temp = { end, weight };
        graph.get(start).add(temp);
    }
    
    
    // 양방향 노드로 세팅
    public void push( int start, int end ) {
        pushOnly( start, end );
        pushOnly( end, start );
    }
    
    public void push( int start, int end, int weight ) {
        pushOnly( start, end, weight );
        pushOnly( end, start, weight );
    }

    
    /* 
     root 노드를 방문 후 방문 노드 추가 
     root 노드와 인접한 노드가 있다면 들어가기 
         방문 노드 추가 해당 기준점으로 root로 다시 시작
         방문 노드들이 DFS 결과로 표시
     loop
    */
    public void searchDFS( int root ) {
        int[] check             = new int[size+1]; // 방문 여부 체크 
        StringBuilder result    = new StringBuilder();
        result = dfs( root, check, result );
        
        System.out.println(result.toString());
    }
    
    public StringBuilder dfs( int root, int[] check, StringBuilder result ) {
        if( check[root] != 1 ) {
            check[root] = 1;
            ArrayList&lt;int[]&gt; temp = graph.get(root);
            result.append( root + " " );
            for (int index = 0; index &lt; temp.size(); index++) {
                dfs( temp.get(index)[0], check, result );
            }
        }
        return result;
    }
    
    public void print() {
        for (int index = 1; index &lt; graph.size(); index++) {
            System.out.println("정점 " + index + "의 인접리스트");
            for (int indexInner = 0; indexInner &lt; graph.get(index).size(); indexInner++) {
                int[] temp = graph.get(index).get(indexInner);
                System.out.print( temp[0]+"("+temp[1]+")" + " ");
            }
            System.out.println();
        }
    }
}


**사용하기
GraphSearchDfsBfs graph = new GraphSearchDfsBfs(6);

graph.push(1, 2);
graph.push(1, 3);
graph.push(2, 3);
graph.push(2, 4);
graph.push(3, 4);
graph.push(1, 5);
graph.push(4, 6);

graph.searchDFS(1);
</pre>
:ET