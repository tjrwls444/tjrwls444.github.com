I"8<h3 id="5-정렬--퀵정렬편">5. 정렬 : 퀵정렬편</h3>
<ul>
  <li>분할 정복 알고리즘을 사용하지만 합병 정렬과의 차이점은  좌 우 나누는 것이 능동적이라 반반이 아니다.</li>
</ul>

<p class="bold-text"> i) 과정(분할 정복 전략을 이용) </p>
<ul>
  <li>input배열 준비</li>
  <li>index의 첫번째 원소를 pivot으로 한다. index의 첫번째 원소를 pivot으로 한다. 피봇보다 작은수를 왼쪽으로 피봇보다 큰수를 오른쪽으로 만들기 진행예정</li>
  <li>pivot을 기준으로 low왼쪽에서 오른쪽으로 가면서 pivot보다 큰 수를 찾고, hight는 오른쪽 끝에서 왼쪽으로 가면서 pivot보다 작은 수를 찾는다.</li>
  <li>두 수를 교환한다.</li>
  <li>반복하면서 low와 height가 교체하는 순간 로직을 멈춘다.</li>
  <li>pivot을 중앙으로 둔다.</li>
  <li>해당을 반복한다.</li>
</ul>

<p class="bold-text"> ii) 장점 </p>
<ul>
  <li>속도가 빠르다</li>
</ul>

<p class="bold-text"> iii) 단점 </p>
<ul>
  <li>최악은 O(N^2)</li>
</ul>

<p class="bold-text"> vi) 시간복잡도</p>
<p>-Best - O(NlogN) , 평균 - O(NlogN), 최악 - O(N^2)</p>

<pre>
class QuickSort {
    private int [] data; 
    private int size;
   
    public QuickSort( int[] data ){
        this.data = data;
        size      = data.length;
    }
    // 오름차순 정렬 1 2 3 4 5
    public void ascendingSrot() {
        sort( 0, size-1, 1);
    }
    
    public void descendingSrot() {
        sort( 0, size-1, 0);
    }
    
    // 1이면 오름차순 , 0이면 내림차순
    public void sort( int leftStart, int rightEnd , int position) {
        //크기가 0이거나 1개일때 필요없음
        if( rightEnd &lt; 0 || leftStart == rightEnd ) return;
        
        int tempLeft     = leftStart;
        int tempRight    = rightEnd;
        int pivot        = data[tempLeft];
        
        while( tempLeft &lt; tempRight ) {
            int tempLeftValue = data[tempLeft];
            int tempRightValue  = data[tempRight];
            
            Boolean nextLeft   = position == 1 ? tempLeftValue &lt;= pivot  : tempLeftValue &gt;= pivot;
            Boolean nextRight  = position == 1 ? tempRightValue &gt;= pivot  : tempRightValue &lt;= pivot;
            
            //피봇보다 큰수찾기
            while(tempLeft &lt; rightEnd &amp;&amp; nextLeft ) {
                tempLeftValue = data[++tempLeft];
                nextLeft  = position == 1 ? tempLeftValue &lt;= pivot  : tempLeftValue &gt;= pivot ;
            }
            
            //피봇보다 작은수 찾기
            while( tempRight &gt; leftStart &amp;&amp; nextRight ) {
                tempRightValue = data[--tempRight];
                nextRight  = position == 1 ? tempRightValue &gt;= pivot  : tempRightValue &lt;= pivot;
            }
            
            // 데이터 교체
            if( tempLeft &lt; tempRight ) {
                data[tempLeft++] = tempRightValue;
                data[tempRight--]  = tempLeftValue;
            }
        }
        
        // 피봇 가운데로 보내기 
        data[leftStart] = data[tempRight];
        data[tempRight]   = pivot;
        
        // pivot을 뺀 좌 우 분할 반복
        if( leftStart &lt; tempRight-1 ) sort( leftStart, tempRight-1 , position);
        if( tempRight+1 &lt; rightEnd ) sort( tempRight+1,rightEnd , position); 
    }
    
    public void print() {
        StringBuilder result = new StringBuilder();
        for (int i : data) {
            result.append(i + " ");
        }
        System.out.println(result.toString());
    }
}

**사용하기
int[] data = {254,3,213,64,75,56,4,324,65,78,9,5,76,3410,8,342,76};
QuickSort sortData = new QuickSort(data);

sortData.ascendingSrot();
sortData.print();

sortData.descendingSrot();
sortData.print();
</pre>
:ET